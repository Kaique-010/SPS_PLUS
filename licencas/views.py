from urllib import request
from django.http import HttpResponse, HttpResponseRedirect
from django.urls import reverse_lazy
from django.utils.decorators import method_decorator
from django.db import connections
from django.contrib.auth import authenticate, login, get_user_model
from django.views.generic import TemplateView
from django.contrib.auth.views import LoginView
from django.views.generic.edit import FormView
from django.contrib.auth.decorators import login_required
from django.contrib.auth import login as auth_login
from django.contrib.auth.views import LogoutView
from django.shortcuts import render, redirect
from django.contrib import messages
from django.views.generic import ListView, CreateView, UpdateView, DeleteView, DetailView

from licencas.mixins import LicenseMixin
from .models import Licencas, Filiais, Empresas
from .forms import LicencasForm, EmpresasForm, FiliaisForm, LoginForm
from .models import Usuarios
from .forms import UsuarioForm
class UsuarioLoginView(FormView):
    template_name = "licencas/login.html"
    form_class = LoginForm
    success_url = reverse_lazy("home")

    def form_valid(self, form):
        username = form.cleaned_data["username"]
        password = form.cleaned_data["password"]

        user = authenticate(self.request, username=username, password=password)

        if user:
            login(self.request, user)

            # Certifique-se de carregar a licen√ßa do usu√°rio corretamente
            licenca = user.licenca if hasattr(user, "licenca") else None
            if licenca:
                licenca = user.licenca  # Se for uma ForeignKey, precisa ser explicitamente recuperada
                banco = licenca.lice_nome  # Nome do banco

                print(f"Licen√ßa: {licenca}, Nome do banco: {banco}, Tipo: {type(banco)}")
                print(f"üéØ Banco salvo na sess√£o: {banco}")

                self.request.session["id"] = user.id 
                self.request.session["licenca_nome"] = banco  # Salvar na sess√£o
                
            return super().form_valid(form)

        return self.form_invalid(form)



def custom_login_view(request):
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(request, username=username, password=password)
        
        if user is not None:
            login(request, user)
            # Redirecionar para a p√°gina correta com base na licen√ßa
            if 'licenca_id' in request.session:
                return redirect('empresas')  # ou outra URL que voc√™ deseja
            else:
                return redirect('select_license')  # Se a licen√ßa n√£o estiver selecionada
        else:
            # Login inv√°lido
            return render(request, 'login.html', {'error': 'Credenciais inv√°lidas'})
    
    return render(request, 'login.html')


def select_license(request):
    if request.method == "POST":
        # Obtemos o nome da licen√ßa selecionada
        licenca_nome = request.POST.get('lice_nome')
        print("Licen√ßa selecionada:", licenca_nome)  # Verifique o valor
        
        try:
            # Buscamos a licen√ßa pelo nome
            licenca = Licencas.objects.get(lice_nome=licenca_nome)
            request.session['selected_licenca_nome'] = licenca.lice_nome  # Armazenamos o nome da licen√ßa na sess√£o

            # Verifica se o usu√°rio est√° autenticado
            if request.user.is_authenticated:
                print("Usu√°rio autenticado com licen√ßa selecionada!")
            else:
                print("Usu√°rio n√£o autenticado")

            return redirect('home')

        except Licencas.DoesNotExist:
            print("Licen√ßa n√£o encontrada!")
            return redirect('select-license')  # Ou p√°gina de erro

    return render(request, 'licencas/select_license.html', {'licencas': Licencas.objects.all()})





@login_required
def select_database(request):
    if not request.user.is_superuser:
        return redirect('home')
    
    if request.method == 'POST':
        selected_db = request.POST.get('db_name')
        if selected_db:
            request.session['selected_db'] = selected_db
            return redirect('home')
    
    # Lista dos bancos dispon√≠veis (voc√™ pode carregar do JSON ou do seu modelo)
    available_dbs = ['save1', 'origin', 'TESTES 2']  
    return render(request, 'select_database.html', {'databases': available_dbs})



@login_required
def select_company_branch(request):
    # Apenas usu√°rios n√£o superusu√°rios devem acessar essa rota
    if request.user.is_superuser:
        return redirect('home')
    
    # Supondo que o usu√°rio tenha acesso √† licen√ßa, obtenha as empresas associadas a essa licen√ßa
    licenca = request.user.licenca
    empresas = Empresas.objects.filter(licenca=licenca)
    
    if request.method == 'POST':
        empresa_id = request.POST.get('empresa')
        filial_id = request.POST.get('filial')
        if empresa_id and filial_id:
            request.session['selected_empresa'] = empresa_id
            request.session['selected_filial'] = filial_id
            return redirect('home')
    
    context = {
        'empresas': empresas,
        # Voc√™ pode, opcionalmente, carregar as filiais do primeiro registro ou usar JavaScript para
        # carregar dinamicamente as filiais conforme a sele√ß√£o da empresa.
    }
    return render(request, 'licencas/select_company_branch.html', context)

class LicencasListView(LicenseMixin, ListView):
    model = Licencas
    template_name = "licencas/licencas_list.html"
    context_object_name = "licencas"

    def get_queryset(self):
        self.set_db()  # Certifica que estamos no banco correto antes da consulta
        queryset = super().get_queryset().using(self.db_name).order_by('lice_id')  # Use o banco correto

        nome = self.request.GET.get('lice_nome', '')
        lice_id = self.request.GET.get('lice_id', '')

        if nome:
            queryset = queryset.filter(lice_nome__icontains=nome)

        if lice_id:
            try:
                queryset = queryset.filter(lice_id=int(lice_id))
            except ValueError:
                pass

        return queryset
    
    
class LicencasCreateView(LicenseMixin,CreateView):
    model = Licencas
    form_class = LicencasForm
    template_name = "licencas/licencas_form.html"
    success_url = reverse_lazy("licenca_list")
    context_object_name = "licencas"


class LicencasUpdateView(LicenseMixin,UpdateView):
    model = Licencas
    form_class = LicencasForm
    template_name = "licencas/licencas_form.html"
    success_url = reverse_lazy("licenca_list")
    context_object_name = "licencas"


class LicencasDetailView(LicenseMixin,DetailView):
    model = Licencas
    template_name = "licencas/licencas_detail.html"
    context_object_name = "licenca"



class LicencasDeleteView(LicenseMixin,DeleteView):
    model = Licencas
    template_name = "licencas/licencas_confirm_delete.html"
    success_url = reverse_lazy("licenca_list")
    context_object_name = "licenca"


class EmpresaListView(LicenseMixin, ListView):
    model = Empresas
    template_name = 'empresa_list.html'
    context_object_name = 'empresas'

    def dispatch(self, request, *args, **kwargs):
        if 'licenca_id' not in request.session:
            return redirect('select_license')  # Redireciona se n√£o houver licen√ßa selecionada
        return super().dispatch(request, *args, **kwargs)

    def get_queryset(self):
        queryset = super().get_queryset().order_by('empr_nome')
        nome = self.request.GET.get('empr_nome', '')
        documento = self.request.GET.get('empr_docu', '')

        if nome:
            queryset = queryset.filter(empr_nome__icontains=nome)

        if documento:
            queryset = queryset.filter(empr_docu__icontains=documento)

        return queryset.filter(licenca=self.get_license()).order_by('empr_nome')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['empr_nome'] = self.request.GET.get('empr_nome', '')
        context['empr_docu'] = self.request.GET.get('empr_docu', '')
        return context


class EmpresaCreateView(LicenseMixin, CreateView):
    model = Empresas
    form_class = EmpresasForm
    template_name = 'licencas/empresa_create.html'
    success_url = reverse_lazy("empresa_list")
    
class EmpresaUpdateView(LicenseMixin, UpdateView):
    model = Empresas
    form_class = EmpresasForm
    template_name = 'licencas/empresa_update.html'
    

class EmpresaDetailView(DetailView):
    model = Empresas
    template_name = 'licencas/empresa_detail.html'

class EmpresaDeleteView(DeleteView):
    model = Empresas
    template_name = 'licencas/empresa_confirm_delete.html'
    success_url = reverse_lazy('empresa_list')
    


class FilialListView(ListView):
    model = Filiais
    template_name = 'filiais/filial_list.html'  # Ajuste conforme seu template
    context_object_name = 'filiais'

    def get_queryset(self):
        # Obt√©m a licen√ßa do usu√°rio atual
        user = self.request.user
        if user.is_authenticated:
            return Filiais.objects.filter(empresa__licenca=user.licenca).distinct()
        return Filiais.objects.none()

   
class FilialCreateView(LicenseMixin, CreateView):
    model = Filiais
    form_class = FiliaisForm
    template_name = 'licencas/filial_create.html'
    success_url = reverse_lazy('filial_list')
    
    def form_valid(self, form):

        empresa = self.request.user.empresas.first() 
        form.instance.empresa = empresa
        return super().form_valid(form)
    
class FilialUpdateView(LicenseMixin, UpdateView):
    model = Filiais
    form_class = FiliaisForm
    template_name = 'licencas/filial_update.html'
    
    def form_valid(self, form):
        form.instance.licenca = self.get_license() 
        return super().form_valid(form)

class FilialDetailView(DetailView):
    model = Filiais
    template_name = 'licencas/filial_detail.html'

class FilialDeleteView(DeleteView):
    model = Filiais
    template_name = 'licencas/filial_confirm_delete.html'
    success_url = reverse_lazy('filial_list')
    


class UsuarioCreateView(LicenseMixin,CreateView):
    model = Usuarios
    form_class = UsuarioForm
    template_name = "licencas/usuario_form.html"
    success_url = reverse_lazy("usuarios_list") 


    def form_valid(self, form):
        form.instance.licenca = self.get_license()  # Certifica-se de que a licen√ßa est√° definida
        return super().form_valid(form)

class UsuariosListView(LicenseMixin,ListView):
    model = Usuarios
    template_name = 'licencas/usuarios_list.html'
    context_object_name = 'usuarios'
    

def test_session(request):
    # Salva dados simples na sess√£o
    request.session['test_key'] = 'test_value'
    request.session.save()  # Salva explicitamente
    return HttpResponse(f"Test session saved: {request.session['test_key']}")